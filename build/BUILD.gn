import("//build/gcc_toolchain.gni")

config("default_include_dirs") {
  include_dirs = [
    "//",
  ]
}

config("compiler") {
  cflags_common = [
    "-fcolor-diagnostics",
    "-Wendif-labels",
    "-Werror",
    "-Wno-missing-field-initializers",
    "-Wno-unused-parameter",
    "-Wno-c++11-narrowing",
    "-Wno-char-subscripts",
    "-Wno-covered-switch-default",
    "-Wno-deprecated-register",
    "-Wno-unneeded-internal-declaration",
    "-Wno-reserved-user-defined-literal",
    "-Wno-inconsistent-missing-override",
    "-fvisibility=hidden",
    "-Xclang",
    "-load",
    "-Xclang",
    "/home/zeus/c/third_party/llvm-build/Release+Asserts/lib/libFindBadConstructs.so",
    "-Xclang",
    "-add-plugin",
    "-Xclang",
    "find-bad-constructs",
    "-Wheader-hygiene",
    "-Wstring-conversion",
    "-Wno-unused-result",
    "-Wno-format",
    "-fno-threadsafe-statics",
    "-fvisibility-inlines-hidden",
    "-Wno-undefined-bool-conversion",
    "-Wno-tautological-undefined-compare",
    "-fno-rtti",
    "-fno-exceptions",
    "-Wno-deprecated",
  ]

  cflags_cc = cflags_common + [ "-std=c++11" ]
  cflags = cflags_common
}

gcc_toolchain("x64") {
  cc = "/home/zeus/c/third_party/llvm-build/Release+Asserts/bin/clang"
  cxx = "/home/zeus/c/third_party/llvm-build/Release+Asserts/bin/clang++"

  ar = "ar"
  ld = cxx

  toolchain_cpu_arch = "x64"
  toolchain_os = "linux"
  is_clang = true
}
