// Copyright 2015 The Subzone Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "base/logging.h"
#include "gtest/gtest.h"
#include "crypto/rijndael.h"
#include "crypto/ssl/rijndael.h"
#include "crypto/ssl/cfb256.h"

namespace crypto {
namespace test {

// Simple block cipher test 256 bits, replace the IV in each test, so no buffer
// overflow in this case. Values of IV are random, and results are checked
// against the Java Rijndael implementation.
TEST(Rijndael256CFB, Key0Plain0) {
  const std::vector<std::string> kIV = {
    {  // Test #1
      102, -126, -12, 77, -38, -70, -22, -119,
      83, 113, -86, -85, 112, -70, 95, -25,
      -74, 29, -24, 71, 90, 74, -108, -23,
      3, -64, 12, 52, 119, 120, 9, 118,
    }, {  // Test #2
      108, 120, -32, -37, -29, 109, 63, -103,
      -18, 34, 44, 2, -106, -113, 10, 87,
      28, 125, -52, 125, -19, -59, -113, -7,
      -102, 97, -6, 93, -14, -73, 115, 60,
    }, {  // Test #3
      123, 33, 67, -121, 114, 69, -87, -70,
      -53, 44, -92, 48, -106, -47, -127, 124,
      -111, -53, 36, 59, -1, -69, -73, 13,
      52, 81, 123, 38, -19, 90, 0, 89,
    }, {  // Test #4
      -85, -110, 86, -47, 99, 49, -109, -63,
      -4, 106, 96, 110, -27, 29, 122, -23,
      21, -65, 118, 116, 30, 58, -34, -122,
      62, 41, -84, 109, 116, -25, 40, 118,
    },
  };

  const std::vector<std::string> kCipher = {
    {  // Test #1
      -101, -88, -118, -23, -78, -41, -15, 70,
      -58, -120, 125, -81, 82, -59, 116, -105,
      40, 79, 20, -88, 73, 15, -25, -128,
      74, -57, 119, 18, -6, 20, 109, 89,
    }, {  // Test #2
      -26, -88, 35, 46, 12, 53, 72, -77,
      66, 41, -52, -128, 76, 1, 72, -74,
      112, -62, -125, -45, -39, 114, 111, 65,
      -45, -53, 124, -91, -68, -124, 59, -60,
    }, {  // Test #3
      16, 124, 47, 22, 48, 85, -128, -105,
      73, -124, -119, 120, 15, 93, -102, 33,
      -53, -81, 11, 121, 69, -66, 83, -4,
      -123, 67, -23, -5, 53, 46, 57, -77,
    } , {  // Test #4
      -69, -100, -54, -10, 36, -43, 92, 23,
      117, -18, -35, 87, -30, -18, 103, -121,
      -82, -76, -25, 46, -2, 9, 23, 34,
      51, -20, 119, -92, -103, 69, 2, -19,
    }
  };

  const std::string kKey0(32, '\0');
  const std::string kPlainText0(32, '\0');

  for (int i(0); i < kIV.size(); ++i) {
    std::string result;

    Rijndael r(kKey0, kIV[i]);
    r.Encrypt(kPlainText0, result);

    ASSERT_TRUE(result.compare(kCipher[i]) == 0);
  }
}

// Test the "chained" operation of CFB, overflowing the register and requesting
// new bytes to refill the buffer. kCipher bytes were tested against the Java
// Rijndael implementation.
TEST(Rijndael256CFB, Key0IV0) {
  const char kPlaintextBytes [64] = {
    37, 49, -10, 60, 88, -18, 16, -47,
    64, -75, 17, 32, 71, -38, 56, -78,
    97, 50, -94, -33, -117, 26, 120, -5,
    -27, 86, -81, -95, 48, -104, 88, 104,
    94, 51, 54, 102, 120, -17, 93, 94,
    1, -121, 93, -53, -63, 107, -95, -64,
    90, 68, -25, -85, -45, 73, 18, 37,
    97, 77, -67, 112, -6, 78, -121, -127,
  };

  const std::vector<std::string> kCipher = {
    { -29, },
    { 19, -120, },
    { 75, 24, 89, },
    {-11, -22, 28, 2, },
    { 105, 69, 96, 84, -109, },
    { -75, 71, -60, -127, -71, 82, },
    { -80, -62, 34, -19, -59, -50, -126, },
    { -111, 100, -46, -101, 6, -55, -105, -55, },
    { 54, 92, 68, -36, -127, 59, -112, 61, -58, },
    { -9, -50, 69, 119, 127, -51, 20, 14, -87, 49, },
  };

  const std::string kKey0(32, '\0');
  const std::string kIV0(32, '\0');

  Rijndael r(kKey0, kIV0);

  int i(0);
  for (int j(1); j <= 10; ++j) {
    std::string result;
    r.Encrypt(std::string(&kPlaintextBytes[i], j), result);
    ASSERT_TRUE(result.compare(kCipher[j-1]) == 0);
    i+=j;
  }
}

// From NESSIE Rijndael
// https://www.cosic.esat.kuleuven.be/nessie/testvectors/bc/
//  rijndael/Rijndael-256-256.unverified.test-vectors
// We use the last 4 tests.

// The 128-bit and 192-bit versions cut the original Known Answer Test 256-bit
// key and are being run under the reference Rijndael_Algorithm Java
// implementation
const uint8_t kRawCiphertext[4][32] = {
  {  // Test #1
    0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe,
    0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe,
    0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe,
    0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe,
  }, {  // Test #2
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  }, {  // Test #3
    0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
    0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
    0x10, 0x21, 0x32, 0x43, 0x54, 0x65, 0x76, 0x87,
    0x98, 0xa9, 0xba, 0xcb, 0xdc, 0xed, 0xfe, 0x0f,
  }, {  // Test #4
    0xea, 0x02, 0x47, 0x14, 0xad, 0x5c, 0x4d, 0x84,
    0xea, 0x02, 0x47, 0x14, 0xad, 0x5c, 0x4d, 0x84,
    0xea, 0x02, 0x47, 0x14, 0xad, 0x5c, 0x4d, 0x84,
    0xea, 0x02, 0x47, 0x14, 0xad, 0x5c, 0x4d, 0x84,
  }
};

const uint8_t kRawKey[4][32] = {
  {  // Test #1
    0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe,
    0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe,
    0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe,
    0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe,
  }, {  // Test #2
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  }, {  // Test #3
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
  }, {  // Test #4
    0x2b, 0xd6, 0x45, 0x9f, 0x82, 0xc5, 0xb3, 0x00,
    0x95, 0x2c, 0x49, 0x10, 0x48, 0x81, 0xff, 0x48,
    0x2b, 0xd6, 0x45, 0x9f, 0x82, 0xc5, 0xb3, 0x00,
    0x95, 0x2c, 0x49, 0x10, 0x48, 0x81, 0xff, 0x48,
  }
};

TEST(Rijndael256, Key128) {
  static const uint8_t kRawPlaintext[4][32] = {
    {  // Test #1
      0xa9, 0x01, 0x1e, 0x9c, 0x90, 0x9c, 0x45, 0x97,
      0xc4, 0x6a, 0xb2, 0x58, 0xa6, 0x35, 0xd8, 0xb1,
      0xb5, 0x80, 0x00, 0x8a, 0xe4, 0xcd, 0xd0, 0x34,
      0xd2, 0x56, 0x9f, 0x9c, 0x57, 0xb2, 0x4d, 0x11,
    }, {  // Test #2
      0xb6, 0xd7, 0x0d, 0xee, 0x79, 0xfb, 0xd8, 0xa2,
      0x1c, 0x7f, 0x64, 0xae, 0xe1, 0xf6, 0xbe, 0x5c,
      0x82, 0xb2, 0xc0, 0x8d, 0x20, 0x55, 0x16, 0xd8,
      0x77, 0xb3, 0xd3, 0xe1, 0x4b, 0xe8, 0x0b, 0xf9,
    }, {  // Test #3
      0x15, 0x3d, 0xc6, 0x98, 0xd0, 0x3a, 0x0a, 0x41,
      0xcf, 0xb8, 0xdb, 0x25, 0x9e, 0xc2, 0x28, 0x62,
      0x37, 0xe3, 0xf9, 0xc9, 0xf0, 0x55, 0xb3, 0x8a,
      0x61, 0x30, 0x53, 0xc4, 0x95, 0x8f, 0x59, 0xb1,
    }, {  // Test #4
      0xef, 0x46, 0xc3, 0x5f, 0xfa, 0x43, 0x2e, 0x08,
      0x8b, 0x50, 0x1f, 0x93, 0x71, 0x12, 0xe6, 0x81,
      0x6c, 0x71, 0x4c, 0x7a, 0x95, 0x15, 0x3e, 0x09,
      0xfb, 0x80, 0x3e, 0x24, 0x68, 0x30, 0x1a, 0x6e,
    }
  };

  for (int i(0); i < 4; ++i) {
    RIJNDAEL256_KEY enc_key;
    RIJNDAEL256_set_encrypt_key(kRawKey[i], 128, &enc_key);

    uint8_t out_buf[32];
    RIJNDAEL256_encrypt(kRawPlaintext[i], out_buf, &enc_key);

    EXPECT_EQ(0, memcmp(kRawCiphertext[i], out_buf, 32));
  }
}

TEST(Rijndael256, Key192) {
  static const uint8_t kRawPlaintext[4][32] = {
    {  // Test #1
      0x24, 0xbe, 0x1d, 0x11, 0xd4, 0x4a, 0x86, 0x3f,
      0x38, 0xcb, 0xb9, 0x98, 0x29, 0x54, 0xa5, 0xbe,
      0x4d, 0xcd, 0x4a, 0x91, 0xbc, 0x13, 0x10, 0x4e,
      0xc0, 0xd5, 0xb5, 0x09, 0x42, 0x99, 0xce, 0x6d,
    }, {  // Test #2
      0x3e, 0xbc, 0xa8, 0x14, 0xeb, 0xc3, 0x37, 0xf3,
      0x17, 0xc9, 0x7e, 0xde, 0x5f, 0xaa, 0xd7, 0x0d,
      0xec, 0x08, 0xf3, 0x01, 0xbe, 0x6e, 0x69, 0x67,
      0xc9, 0xf9, 0xed, 0x01, 0xc2, 0xfc, 0xe1, 0xf7,
    }, {  // Test #3
      0x72, 0xc5, 0x2a, 0x49, 0xc9, 0xbf, 0xc5, 0xd0,
      0xff, 0xf8, 0xad, 0xa7, 0x97, 0x39, 0x3f, 0xf9,
      0x68, 0x59, 0xfb, 0xd5, 0xaf, 0x68, 0xe3, 0xb5,
      0xa3, 0x67, 0x33, 0xeb, 0x4e, 0x71, 0xdc, 0x23,
    }, {  // Test #4
      0x05, 0x49, 0x2a, 0x5d, 0xf5, 0x19, 0x77, 0xbe,
      0xee, 0x64, 0xf6, 0x89, 0x74, 0xcf, 0xbb, 0x9f,
      0xc3, 0x65, 0xcd, 0x1c, 0xd5, 0x8f, 0xaa, 0xe6,
      0x9a, 0xb3, 0x8c, 0x7c, 0x55, 0x8a, 0xb8, 0x3f,
    }
  };

  for (int i(0); i < 4; ++i) {
    RIJNDAEL256_KEY enc_key;
    RIJNDAEL256_set_encrypt_key(kRawKey[i], 192, &enc_key);

    uint8_t out_buf[32];
    RIJNDAEL256_encrypt(kRawPlaintext[i], out_buf, &enc_key);

    EXPECT_EQ(0, memcmp(kRawCiphertext[i], out_buf, 32));
  }
}

TEST(Rijndael256, Key256) {
  static const uint8_t kRawPlaintext[4][32] = {
    {  // Test #1
      0x08, 0xb2, 0xf0, 0x8a, 0xe5, 0x19, 0x1f, 0x14,
      0x12, 0xa6, 0x4f, 0x59, 0x2b, 0x8e, 0x1e, 0xcd,
      0x9c, 0x03, 0x73, 0xe9, 0x80, 0xf6, 0x45, 0x62,
      0xe4, 0xa2, 0x66, 0xcd, 0x89, 0x7e, 0xcb, 0x5c,
    }, {  // Test #2
      0x8c, 0x27, 0xa4, 0x6f, 0x7a, 0x2b, 0xfb, 0xe8,
      0x17, 0x9b, 0x71, 0x2c, 0x8c, 0x9a, 0x1a, 0x10,
      0x44, 0x49, 0x7d, 0x39, 0x92, 0x81, 0x7b, 0xa2,
      0x2f, 0x9d, 0x94, 0x36, 0x0d, 0x67, 0x71, 0x02,
    }, {  // Test #3
      0xc2, 0xb1, 0x71, 0x2f, 0xd4, 0x62, 0x84, 0xe8,
      0x47, 0x21, 0xe6, 0x68, 0x24, 0x12, 0x3a, 0x39,
      0x3c, 0xe9, 0x30, 0x1f, 0x44, 0xba, 0x1b, 0xe8,
      0xff, 0x34, 0x08, 0xdb, 0x70, 0x8f, 0xa4, 0x5b,
    }, {  // Test #4
      0x2e, 0xca, 0xb2, 0xac, 0xdc, 0xce, 0xe8, 0xba,
      0x38, 0x58, 0xa3, 0x75, 0x0a, 0x2b, 0xfa, 0x5c,
      0xd8, 0x39, 0x39, 0x7b, 0x44, 0x5d, 0xbd, 0x93,
      0x67, 0x05, 0x21, 0x08, 0xf7, 0xd7, 0x54, 0x8e,
    }
  };

  for (int i(0); i < 4; ++i) {
    RIJNDAEL256_KEY enc_key;
    RIJNDAEL256_set_encrypt_key(kRawKey[i], 256, &enc_key);

    uint8_t out_buf[32];
    RIJNDAEL256_encrypt(kRawPlaintext[i], out_buf, &enc_key);

    EXPECT_EQ(0, memcmp(kRawCiphertext[i], out_buf, 32));
  }
}

}  // namespace test
}  // namespace crypto
